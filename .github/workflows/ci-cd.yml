name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements_web.txt
        pip install pytest flake8
    
    - name: Lint with flake8
      run: |
        # Basic linting, ignore line length for now
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Run tests
      run: |
        python test_web_setup.py
    
    - name: Test Docker build
      run: |
        docker build -t spotpdf-web-test .

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  deploy-staging:
    needs: [test, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    
    environment: staging
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Create config file
      run: |
        mkdir -p GoogleLoginLauncher
        cat > GoogleLoginLauncher/SpotPDFLauncher.config.json << EOF
        {
          "GoogleClientId": "${{ secrets.GOOGLE_CLIENT_ID }}",
          "GoogleClientSecret": "${{ secrets.GOOGLE_CLIENT_SECRET }}",
          "ServiceAccountKeyPath": "client_service_account.json",
          "SpreadsheetUrl": "${{ secrets.SPREADSHEET_URL }}"
        }
        EOF
    
    - name: Create service account key
      run: |
        echo '${{ secrets.SERVICE_ACCOUNT_KEY }}' > client_service_account.json
    
    - name: Build and deploy to staging
      run: |
        # Add your staging deployment commands here
        echo "Deploying to staging environment..."
        # docker-compose -f docker-compose.staging.yml up -d

  deploy-production:
    needs: [test, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Create config file
      run: |
        mkdir -p GoogleLoginLauncher
        cat > GoogleLoginLauncher/SpotPDFLauncher.config.json << EOF
        {
          "GoogleClientId": "${{ secrets.GOOGLE_CLIENT_ID }}",
          "GoogleClientSecret": "${{ secrets.GOOGLE_CLIENT_SECRET }}",
          "ServiceAccountKeyPath": "client_service_account.json",
          "SpreadsheetUrl": "${{ secrets.SPREADSHEET_URL }}"
        }
        EOF
    
    - name: Create service account key
      run: |
        echo '${{ secrets.SERVICE_ACCOUNT_KEY }}' > client_service_account.json
    
    - name: Deploy to production
      run: |
        # Add your production deployment commands here
        echo "Deploying to production environment..."
        # docker-compose -f docker-compose.prod.yml up -d